[package]
name = "library_checker_verification"
version = "0.1.0"
edition = "2018"

[dev-dependencies]
prelude = { path = "../../crates/prelude" }
io_util = { path = "../../crates/util/io_util" }
algebra = { path = "../../crates/algebra" }
string_util = { path = "../../crates/util/string_util" }
range_traits = { path = "../../crates/range_traits" }
pollard_rho = { path = "../../crates/algebra/pollard_rho" }
addition = { path = "../../crates/algebra/binary_operation/addition" }
minimization = { path = "../../crates/algebra/binary_operation/minimization" }
disjoint_sparse_table = { path = "../../crates/data_structure/disjoint_sparse_table" }
dynamic_li_chao_tree = { path = "../../crates/data_structure/dynamic_li_chao_tree" }
sparse_table = { path = "../../crates/data_structure/sparse_table" }
segment_tree = { path = "../../crates/data_structure/segment_tree" }
lazy_segment_tree = { path = "../../crates/data_structure/lazy_segment_tree" }
library_checker_solver = { path = "../../solvers/library_checker" }

[[example]]
name = "factorize"
path = "factorize.rs"

[[example]]
name = "rmq-disjoint-sparse-table"
path = "rmq_distjoint_sparse_table.rs"

[[example]]
name = "rmq-sparse-table"
path = "rmq_sparse_table.rs"

[[example]]
name = "rmq-segment-tree"
path = "rmq_segment_tree.rs"

[[example]]
name = "rmq-lazy-segment-tree"
path = "rmq_lazy_segment_tree.rs"

[[example]]
name = "segment_add_get_min_dlct"
path = "segment_add_get_min.rs"

[[example]]
name = "line_add_get_min_dlct"
path = "line_add_get_min.rs"

[[example]]
name = "range_kth_smallest"
path = "range_kth_smallest.rs"

[[example]]
name = "static_range_frequency"
path = "static_range_frequency.rs"

[[example]]
name = "vertex_add_path_sum"
path = "vertex_add_path_sum.rs"

[[example]]
name = "vertex_add_path_sum2"
path = "vertex_add_path_sum2.rs"

[[example]]
name = "strongly_connected_components"
path = "strongly_connected_components.rs"

[[example]]
name = "shortest_path"
path = "shortest_path.rs"
